<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GSoC on Rahul Jha (~RJ722) Blog</title><link>https://rj722.com/blog/tags/gsoc/</link><description>Recent content in GSoC on Rahul Jha (~RJ722) Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 04 May 2021 04:11:13 +0530</lastBuildDate><atom:link href="https://rj722.com/blog/tags/gsoc/index.xml" rel="self" type="application/rss+xml"/><item><title>GSoC Project</title><link>https://rj722.com/blog/gsoc_project/</link><pubDate>Sun, 28 May 2017 00:28:48 +0530</pubDate><guid>https://rj722.com/blog/gsoc_project/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>The motivation, here, is to extend the functionality of vulture as a library,
and to pass on all metadata through the API and then to harness this utility in
VultureBear for auto removing dead code, which would greatly optimise the bear.
The second part of this project focuses on offering the source range of the dead
code which would make auto-removal much easier. As of now, vulture only supplies
the beginning of the dead code. Also, it proposes to enhance vulture in order to
detect unreachable code (like &lt;code>if False&lt;/code>, &lt;code>if True else&lt;/code>, any code written after
return statements, etc). - this shall help the user in trimming down their
codebase without affecting usability. Also, the third part would be to implement
a confidence value for every result, this shall be helpful when tackling false
positives.&lt;/p></description></item><item><title>GSoC Project Timeline</title><link>https://rj722.com/blog/project-timeline/</link><pubDate>Sun, 28 May 2017 00:28:48 +0530</pubDate><guid>https://rj722.com/blog/project-timeline/</guid><description>&lt;p>Here is a description of how I plan to manage my schedule during GSoC period.&lt;/p>
&lt;h2 id="project-overview">Project Overview&lt;/h2>
&lt;p>Presently, we have coala - an automatic code linter and vulture - dead code
reporter. Amongst coala&amp;rsquo;s fundamental &lt;code>code checkers&lt;/code> known as &lt;code>Bears&lt;/code>, there is
a &lt;code>VultureBear&lt;/code> which runs vulture over the input batch of files and prepares a
patch for the respective files. The project proposal focuses on improving the
VultureBear and making vulture available as a library rather than as command
line tool.&lt;/p></description></item></channel></rss>