<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Rahul Jha (~RJ722) Blog</title><link>https://rj722.com/blog/tags/programming/</link><description>Recent content in Programming on Rahul Jha (~RJ722) Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 09 Jul 2022 20:20:09 +0530</lastBuildDate><atom:link href="https://rj722.com/blog/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>"isn't a title of this post" isn't a title of this post</title><link>https://rj722.com/blog/self-referential-blog-post/</link><pubDate>Mon, 20 Jan 2020 00:28:48 +0530</pubDate><guid>https://rj722.com/blog/self-referential-blog-post/</guid><description>&lt;p>In the early part of the last century, when David Hilbert was working on
stricter formalization of geometry than Euclid, Georg Cantor had worked out a
theory of different types of infinities, &lt;em>the theory of sets&lt;/em>. This
theory would soon unveil a series of confusing paradoxes, leading to &lt;a
href="https://en.wikipedia.org/wiki/Foundations_of_mathematics#Foundational_crisis">
a crisis in the Mathematics community &lt;/a> regarding the stability of the
foundational principles of the math of that time.&lt;/p>
&lt;p>Central to these paradoxes was the &lt;em>Russell&amp;rsquo;s paradox&lt;/em> (or more generally, as
we&amp;rsquo;d talk about later, the &lt;em>Epimenides Paradox&lt;/em>). Let&amp;rsquo;s see what it is.&lt;/p></description></item><item><title>The [deceptive] power of visual explanation</title><link>https://rj722.com/blog/visual-explanation/</link><pubDate>Mon, 22 Jul 2019 00:28:48 +0530</pubDate><guid>https://rj722.com/blog/visual-explanation/</guid><description>&lt;p>Quite recently, I came across Jay Alammar&amp;rsquo;s beautiful blog post, &lt;a href="https://jalammar.github.io/visual-numpy/">&amp;ldquo;A
Visual Intro to NumPy &amp;amp; Data Representation&amp;rdquo;&lt;/a>.&lt;/p>
&lt;p>Before reading this, whenever I had to think about an array:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Out&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I used to create a mental picture somewhat like this:&lt;/p>
&lt;pre tabindex="0">&lt;code> ┌────┬────┬────┐
data = │ 1 │ 2 │ 3 │
 └────┴────┴────┘
&lt;/code>&lt;/pre>&lt;p>But Jay, on the other hand, uses a vertical stack for representing the same array.&lt;/p></description></item><item><title>Using Weechat with Glowing Bear for IRC</title><link>https://rj722.com/blog/using-weechat-with-glowing-bear/</link><pubDate>Tue, 02 Jul 2019 00:28:48 +0530</pubDate><guid>https://rj722.com/blog/using-weechat-with-glowing-bear/</guid><description>&lt;p>Last month, I had a new addition to my toolbox - &lt;a href="https://www.glowing-bear.org/#!/">Glowing
Bear&lt;/a>, which has been a really nice improvement, allowing me to access
Weechat (hosted on a server) through my browser. Here&amp;rsquo;s how I set it up.&lt;/p>
&lt;p>But, before we begin - the curious folks might ask, &amp;ldquo;What had you been using
all this time?&amp;rdquo;&lt;/p>
&lt;p>Previously, I could directly ssh&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> into my server, and attach to a
&lt;a href="https://www.gnu.org/software/screen/">&lt;code>screen&lt;/code>&lt;/a> session which ran weechat, using the command:&lt;/p></description></item></channel></rss>